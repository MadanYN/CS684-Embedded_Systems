#define threshold 500 
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

volatile unsigned long int pulse = 0; //to keep the track of the number of pulses generated by the color sensor
volatile unsigned long int red;       // variable to store the pulse count when read_red function is called
volatile unsigned long int blue;      // variable to store the pulse count when read_blue function is called
volatile unsigned long int green;     // variable to store the pulse count when read_green function is called

bool red_b;
bool green_b;
bool blue_b;

void color_sensor_pin_config(void)
{
	DDRD  = DDRD & 0xFB; //set PD2 as input for color sensor output
	PORTD = PORTD | 0x04;//Enable internal pull-up for PORTD 2 pin
  DDRD = DDRD | 0xF0;
}

void port_init(void)
{

	color_sensor_pin_config();//color sensor pin configuration
}

void color_sensor_pin_interrupt_init(void) //Interrupt 0 enable
{
	cli(); //Clears the global interrupt
	EICRA = EICRA | 0x02; // INT0 is set to trigger with falling edge
	EIMSK = EIMSK | 0x01; // Enable Interrupt INT0 for color sensor
	sei(); // Enables the global interrupt
}

//ISR for color sensor
ISR(INT0_vect)
{
	pulse++; 
}

void init_devices(void)
{
	cli(); 
	port_init();  //Initializes all the ports
	color_sensor_pin_interrupt_init();
	sei(); 
}

//Filter Selection
void filter_red(void)    
{
	PORTD = PORTD & 0xBF; //set S2 low
	PORTD = PORTD & 0x7F; //set S3 low

}

void filter_green(void)	
{
	PORTD = PORTD | 0x40; //set S2 High
	PORTD = PORTD | 0x80; //set S3 High
}

void filter_blue(void)	
{
	
	PORTD = PORTD & 0xBF; //set S2 low
	PORTD = PORTD | 0x80; //set S3 High
}

void filter_clear(void)	
{
	
	PORTD = PORTD | 0x40; //set S2 High
	PORTD = PORTD & 0x7F; //set S3 Low
}


void color_sensor_scaling()		
{
	//Output Scaling 20%
	
	PORTD = PORTD | 0x10; //set S0 high
	PORTD = PORTD & 0xDF; //set S1 low
}

void red_read(void) 
{
  sei();
	filter_red(); 
	pulse=0; //reset the count to 0
	_delay_ms(100); 
	red = pulse;  
  filter_clear();
	cli();
}

void green_read(void) 
{
  sei();
	filter_green(); 
	pulse=0; 
	_delay_ms(100);
	green = pulse;
  cli();
	
}

void blue_read(void) 
{
  sei();
	filter_blue(); 
	pulse=0;
	_delay_ms(100);
	blue = pulse;
  cli();

}